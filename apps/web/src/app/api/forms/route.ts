import { NextRequest, NextResponse } from 'next/server'
import { getServerUser } from '@/lib/auth-server'
import { supabase } from '@/lib/supabase'
import { TablesInsert } from '@/lib/types/database'

// GET /api/forms - List user's forms
export async function GET() {
  try {
    const user = await getServerUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const { data: forms, error } = await supabase
      .from('forms')
      .select(`
        id,
        title,
        description,
        token,
        custom_alias,
        template_type,
        is_active,
        expires_at,
        created_at,
        updated_at,
        submission_count
      `)
      .eq('user_id', user.id)
      .order('created_at', { ascending: false })

    if (error) {
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    return NextResponse.json({ forms })
  } catch (err) {
    console.error('Forms API error:', err)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// POST /api/forms - Create new form
export async function POST(request: NextRequest) {
  try {
    const user = await getServerUser()
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const {
      title,
      description,
      questions,
      branding,
      settings,
      custom_alias,
      template_type,
      expires_at
    } = body

    // Validate required fields
    if (!title || !questions) {
      return NextResponse.json(
        { error: 'Title and questions are required' },
        { status: 400 }
      )
    }

    // Create form data - token will be auto-generated by database trigger
    const formData: TablesInsert<'forms'> = {
      user_id: user.id,
      title,
      description,
      questions,
      branding: branding || {},
      settings: settings || {},
      custom_alias,
      template_type,
      expires_at
    }

    const { data: form, error } = await supabase
      .from('forms')
      .insert(formData)
      .select()
      .single()

    if (error) {
      if (error.code === '23505') {
        return NextResponse.json(
          { error: 'Custom alias already exists' },
          { status: 409 }
        )
      }
      return NextResponse.json({ error: error.message }, { status: 500 })
    }

    return NextResponse.json({ form }, { status: 201 })
  } catch (err) {
    console.error('Forms API error:', err)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
} 