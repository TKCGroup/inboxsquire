-- Migration to create the table for tracking draft requests

CREATE TABLE draft_requests (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id) NOT NULL,
  gmail_message_id TEXT NOT NULL UNIQUE, -- Ensure only one draft request per message
  classification_id UUID REFERENCES email_classifications(id), -- Link to the classification that triggered this
  status TEXT NOT NULL DEFAULT 'pending_review', -- e.g., pending_review, generating_draft, draft_ready, draft_approved, draft_sent, cancelled
  llm_summary TEXT, -- Store the summary from classification for context
  generated_draft_content TEXT, -- Store the LLM-generated draft here later
  created_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at TIMESTAMPTZ DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Comment explaining the purpose of the index
-- Optional: Index for faster lookups by user and status
CREATE INDEX idx_draft_requests_user_status ON draft_requests(user_id, status);

-- RLS Policy: Users can only see their own draft requests
ALTER TABLE draft_requests ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow users to manage their own draft requests"
  ON draft_requests
  FOR ALL
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id); -- Added WITH CHECK for inserts/updates

-- Trigger function for updated_at (using the existing function from the first migration)
CREATE TRIGGER set_timestamp_draft_requests
BEFORE UPDATE ON public.draft_requests
FOR EACH ROW
EXECUTE FUNCTION public.trigger_set_timestamp(); 